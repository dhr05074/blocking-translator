{"version":3,"sources":["components/FormComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["SUCCESS_COPY","ERR_NOT_ENTER_TEXT","FormComponent","state","text","probability","handleChange","e","_ref","name","value","_this","setState","Object","defineProperty","handleClickCopyBtn","props","toastManager","add","appearance","autoDismiss","handleClickTranslateBtn","_this$state","_this$props","onClickBtn","undefined","_this2","this","_this$state2","input","translatedStr","react_default","a","createElement","Form","Field","Header","as","TextArea","className","rows","onChange","placeholder","Subheader","concat","build","color","settings","start","min","max","step","Button","primary","onClick","readOnly","lib","onCopy","Component","doubleLastChars","groupG","groupN","groupR","groupB","groupS","selectedCharIndex","getRandomCharIndex","array","arrayMaxIndex","length","Math","floor","random","translateStr","str","test","isHangul","randLast","initial","charCodeAt","getInitial","middle","getMiddle","last","getLast","index","indexOf","strCode","String","fromCharCode","FormWithToasts","withToastManager","App","handleTranslateBtn","data","probability_","i","charAt","dist","autoDismissTimeout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5894b89.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Button, Form, TextArea, Header,\r\n} from 'semantic-ui-react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { Slider } from 'react-semantic-ui-range';\r\nimport './FormComponent.scss';\r\n\r\nconst SUCCESS_COPY = '복사되었습니다';\r\nconst ERR_NOT_ENTER_TEXT = '번역할 내용을 입력해 주세요.';\r\n\r\nclass FormComponent extends Component {\r\n  state = {\r\n    text: '',\r\n    probability: 50,\r\n  };\r\n\r\n  handleChange = (e, { name, value }) => {\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleClickCopyBtn = () => {\r\n    const { toastManager } = this.props;\r\n    toastManager.add(SUCCESS_COPY, { appearance: 'success', autoDismiss: true });\r\n  };\r\n\r\n  handleClickTranslateBtn = () => {\r\n    const { text, probability } = this.state;\r\n    const { toastManager, onClickBtn } = this.props;\r\n    if (text === '' || text === undefined || text === null) {\r\n      toastManager.add(ERR_NOT_ENTER_TEXT, { appearance: 'error', autoDismiss: true });\r\n    } else {\r\n      onClickBtn({ text, probability });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { text: input, probability } = this.state;\r\n    const { handleChange, handleClickCopyBtn, handleClickTranslateBtn } = this;\r\n    const { translatedStr } = this.props;\r\n\r\n    return (\r\n      <Form>\r\n        <Form.Field>\r\n          <Header as=\"h4\">변환할 내용</Header>\r\n          <TextArea\r\n            className=\"input-plaintext\"\r\n            name=\"text\"\r\n            rows=\"8\"\r\n            onChange={handleChange}\r\n            value={input}\r\n            placeholder=\"변환할 내용을 입력해주세요.\"\r\n          />\r\n          <div className=\"row\">\r\n            <div>\r\n              <Header as=\"h4\">\r\n                {'변환율'}\r\n                <Header.Subheader>\r\n                  {'변환율을 높일 수록 번역기가 제대로 번역하지 못할 가능성이 커집니다.'}\r\n                </Header.Subheader>\r\n              </Header>\r\n            </div>\r\n            <div className=\"right\">{`${probability}%`}</div>\r\n          </div>\r\n          <div className=\"slider-probability\">\r\n            <Slider\r\n              color=\"blue\"\r\n              settings={{\r\n                start: probability,\r\n                min: 50,\r\n                max: 100,\r\n                step: 1,\r\n                onChange: value => this.setState({ probability: value }),\r\n              }}\r\n            />\r\n          </div>\r\n          <footer>\r\n            <Button className=\"right\" primary onClick={handleClickTranslateBtn}>\r\n              {'변환'}\r\n            </Button>\r\n          </footer>\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Header as=\"h4\">변환된 내용</Header>\r\n          <TextArea\r\n            rows=\"8\"\r\n            value={translatedStr}\r\n            readOnly\r\n            placeholder=\"변환된 결과가 표시됩니다\"\r\n          />\r\n          <footer>\r\n            <CopyToClipboard text={translatedStr} onCopy={handleClickCopyBtn}>\r\n              <Button className=\"right\" primary>\r\n                {'복사하기'}\r\n              </Button>\r\n            </CopyToClipboard>\r\n          </footer>\r\n        </Form.Field>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormComponent;\r\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { ToastProvider, withToastManager } from 'react-toast-notifications';\nimport FormComponent from './components/FormComponent';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\n\n// 쌍자음인 종성들의 인덱스 집합\nconst doubleLastChars = [2, 5, 6, 9, 10, 11, 12, 13, 14, 15, 18, 20];\n\n// ㄱ 그룹\nconst groupG = [2, 3];\n// ㄴ 그룹\nconst groupN = [5, 6];\n// ㄹ 그룹\nconst groupR = [9, 10, 11, 12, 13, 14, 15];\n// ㅂ 그룹\nconst groupB = [18];\n// ㅅ 그룹\nconst groupS = [20];\n\n// 번환할 확률\nlet probability = 50;\nlet selectedCharIndex = 0;\n\nfunction getInitial(str) {\n  const r = Math.floor((str.charCodeAt(0) - 0xac00) / 28 / 21);\n  // const t = String.fromCharCode(r + 4352);\n  return r;\n}\n\nfunction getMiddle(str) {\n  const r = Math.floor(((str.charCodeAt(0) - 0xac00) / 28) % 21);\n  // const t = String.fromCharCode(r + 4449);\n  return r;\n}\n\nfunction getLast(str) {\n  const r = Math.floor((str.charCodeAt(0) - 0xac00) % 28);\n  // const t = String.fromCharCode(r + 4519);\n  return r;\n}\n\nfunction isHangul(str) {\n  const regex = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\n\n  return regex.test(str);\n}\n\nfunction isLastCharDouble(index) {\n  return doubleLastChars.indexOf(index) !== -1;\n}\n\nfunction getRandomCharIndex(array) {\n  const arrayMaxIndex = array.length - 1;\n  const randIndex = Math.floor(Math.random() * arrayMaxIndex);\n\n  return array[randIndex];\n}\n\nfunction translateStr(str) {\n  // 한글인 경우에만 변환함\n  if (isHangul(str)) {\n    const initial = getInitial(str);\n    const middle = getMiddle(str);\n    const last = getLast(str);\n\n    // 초성만 쓴 경우나 종성이 쌍자음인 경우\n    if (middle < 0 || isLastCharDouble(last)) {\n      return str;\n    }\n\n    // 일정 확률로 변환함\n    const randNum = Math.floor(Math.random() * 100);\n    if (randNum > probability) {\n      return str;\n    }\n\n    let randLast;\n    switch (last) {\n    case 0:\n      // 종성 없음\n      randLast = selectedCharIndex;\n      break;\n    case 1:\n      // ㄱ 그룹\n      randLast = getRandomCharIndex(groupG);\n      break;\n    case 4:\n      // ㄴ 그룹\n      randLast = getRandomCharIndex(groupN);\n      break;\n    case 8:\n      // ㄹ 그룹\n      randLast = getRandomCharIndex(groupR);\n      break;\n    case 17:\n      // ㅂ 그룹\n      randLast = getRandomCharIndex(groupB);\n      break;\n    case 19:\n      // ㅅ 그룹\n      randLast = getRandomCharIndex(groupS);\n      break;\n    default:\n      return str;\n    }\n\n    const strCode = 44032 + initial * 588 + middle * 28 + randLast;\n\n    return String.fromCharCode(strCode);\n  }\n\n  return str;\n}\n\nconst FormWithToasts = withToastManager(FormComponent);\n\nclass App extends Component {\n  state = {\n    translatedStr: '',\n  };\n\n  handleTranslateBtn = (data) => {\n    const { text, probability: probability_ } = data;\n\n    probability = probability_;\n\n    let tmpStr;\n    let translatedStr = '';\n\n    // 밑받침으로 깔 종성 하나 선택\n    selectedCharIndex = getRandomCharIndex(doubleLastChars);\n\n    // String 객체의 각 문자를 변환한다.\n    for (let i = 0; i < text.length; i += 1) {\n      tmpStr = text.charAt(i);\n      translatedStr += translateStr(tmpStr);\n    }\n\n    this.setState({\n      translatedStr,\n    });\n  };\n\n  render() {\n    const { handleTranslateBtn } = this;\n    const { translatedStr } = this.state;\n\n    return (\n      <ToastProvider autoDismissTimeout={2000}>\n        <div className=\"translator-wrapper\">\n          <header className=\"header\">\n            <Header as=\"h2\">\n              번역기 무력화 도구\n              <Header.Subheader>한국 사람만 알아볼 수 있도록 바꿔드립니다.</Header.Subheader>\n            </Header>\n          </header>\n          <section className=\"form-wrapper\">\n            <FormWithToasts\n              onClickBtn={handleTranslateBtn}\n              translatedStr={translatedStr}\n              probability={probability}\n            />\n          </section>\n          <footer className=\"contact\">\n            <div className=\"item\">\n              <div className=\"header\">문의</div>\n              <div className=\"content\">dhr05074@gmail.com</div>\n            </div>\n          </footer>\n        </div>\n      </ToastProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}